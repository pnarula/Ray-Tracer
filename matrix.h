#include <stdio.h>
#include <stdlib.h>
#include <vector>
using namespace std;

struct Matrix
{
// 	std::vector< vector<float> > m;
	float m[4][4];
	float p[4][1];
};

Matrix multMat(Matrix &A, Matrix &B)
{
	Matrix M;
	for(int i = 0; i<4; i++)
	  M.p[i][0] = 0.0;
	
	for(int i = 0; i < 4; i++)
	  for(int j = 0; j < 4; j++)
		M.p[i][0] += A.m[i][j] * B.p[j][0];  
	  
	return M;
}

Matrix multbigMat(Matrix &A, Matrix &B)
{
	Matrix M;
	for(int i = 0; i<4; i++)
	  M.m[i][0] = 0.0;
	
	for(int i = 0; i < 4; i++)
	  for(int j = 0; j < 4; j++)
	    for(int k = 0; k<4; k++)
	      M.m[i][j] += A.m[i][k] * B.m[k][j];  
	      
	  
	return M;
}

float findDet(Matrix &A)
{
    float n = 0;
    int i, j;
  
 
  	i = 0;
	for(j=0;j<4;j++)
	{     
	      if(j==3)
 		n+=A.m[i][j]*A.m[i+1][0]*A.m[i+2][1]*A.m[i+3][2]; 
	      else if(j==2) 
		n+=A.m[i][j]*A.m[i+1][j+1]*A.m[i+2][0]*A.m[i+3][1];
	      else if(j==1)
		n+=A.m[i][j]*A.m[i+1][j+1]*A.m[i+2][j+2]*A.m[i+3][0];
	      else
		n+=A.m[i][j]*A.m[i+1][j+1]*A.m[i+2][j+2]*A.m[i+3][j+3];
	}
	
	i = 3;
	for(j=0;j<4;j++)
	{     
	      if(j==3)
		n-=A.m[i][j]*A.m[i-1][0]*A.m[i-2][1]*A.m[i-3][2];
	      else if(j==2) 
		n-=A.m[i][j]*A.m[i-1][j+1]*A.m[i-2][0]*A.m[i-3][1];
	      else if(j==1)
		n-=A.m[i][j]*A.m[i-1][j+1]*A.m[i-2][j+2]*A.m[i-3][0];
	      else
		n-=A.m[i][j]*A.m[i-1][j+1]*A.m[i-2][j+2]*A.m[i-3][j+3];
	}
    return n;
}

Matrix invMat(Matrix &A)
{	Matrix I;
	float B[4][4];
	float C[4][4];
	float x, n;
	int i, j;
	
	for(i = 0; i<4; i++)
	  for(j = 0; j<4; j++)
	  {	B[i][j] = 0;
		C[i][j] = 0;
	  }
	
	n = findDet(A);
	
	x=1.0/n;
	
	for(i=0;i<4;i++)
	      for(j=0;j<4;j++)
		      B[i][j]=A.m[j][i];
	
	C[0][0]=(B[1][1]*B[2][2]*B[3][3]+B[1][2]*B[2][3]*B[3][1]+B[1][3]*B[2][1]*B[3][2])-(B[1][1]*B[2][3]*B[3][2]+B[1][2]*B[2][1]*B[3][3]+B[1][3]*B[2][2]*B[3][1]);
	C[0][1]=(-1)*((B[1][0]*B[2][2]*B[3][3]+B[1][2]*B[2][3]*B[3][0]+B[1][3]*B[2][0]*B[3][2])-(B[1][0]*B[2][3]*B[3][2]+B[1][2]*B[2][0]*B[3][3]+B[1][3]*B[2][2]*B[3][0]));
	C[0][2]=((B[1][0]*B[2][1]*B[3][3]+B[1][1]*B[2][3]*B[3][0]+B[1][3]*B[2][0]*B[3][1])-(B[1][0]*B[2][3]*B[3][1]+B[1][1]*B[2][0]*B[3][3]+B[1][3]*B[2][1]*B[3][0]));
	C[0][3]=(-1)*(B[1][0]*B[2][1]*B[3][2]+B[1][1]*B[2][2]*B[3][0]+B[1][2]*B[2][0]*B[3][1])-(B[1][0]*B[2][2]*B[3][1]+B[1][1]*B[2][0]*B[3][2]+B[1][2]*B[2][1]*B[3][0]);
	
	C[1][0]=(-1)*(B[0][1]*B[2][2]*B[3][3]+B[0][2]*B[2][3]*B[3][1]+B[0][3]*B[2][1]*B[3][2])-(B[0][1]*B[2][3]*B[3][2]+B[0][2]*B[2][1]*B[3][3]+B[0][3]*B[2][2]*B[3][1]);
	C[1][1]=((B[0][0]*B[2][2]*B[3][3]+B[0][2]*B[2][3]*B[3][0]+B[0][3]*B[2][0]*B[3][2])-(B[0][0]*B[2][3]*B[3][2]+B[0][2]*B[2][0]*B[3][3]+B[0][3]*B[2][2]*B[3][0]));
	C[1][2]=(-1)*((B[0][0]*B[2][1]*B[3][3]+B[0][1]*B[2][3]*B[3][0]+B[0][3]*B[2][0]*B[3][1])-(B[0][0]*B[2][3]*B[3][1]+B[0][1]*B[2][0]*B[3][3]+B[0][3]*B[2][1]*B[3][0]));
	C[1][3]=(B[0][0]*B[2][1]*B[3][2]+B[0][1]*B[2][2]*B[3][0]+B[0][2]*B[2][0]*B[3][1])-(B[0][0]*B[2][2]*B[3][1]+B[0][1]*B[2][0]*B[3][2]+B[0][2]*B[2][1]*B[3][0]);
	
	C[2][0]=(B[0][1]*B[1][2]*B[3][3]+B[0][2]*B[1][3]*B[3][1]+B[0][3]*B[1][1]*B[3][2])-(B[0][1]*B[1][3]*B[3][2]+B[0][2]*B[1][1]*B[3][3]+B[0][3]*B[1][2]*B[3][1]);
	C[2][1]=(-1)*((B[0][0]*B[1][2]*B[3][3]+B[0][2]*B[1][3]*B[3][0]+B[0][3]*B[1][0]*B[3][2])-(B[0][0]*B[1][3]*B[3][2]+B[0][2]*B[1][0]*B[3][3]+B[0][3]*B[1][2]*B[3][0]));
	C[2][2]=((B[0][0]*B[1][1]*B[3][3]+B[0][1]*B[1][3]*B[3][0]+B[0][3]*B[1][0]*B[3][1])-(B[0][0]*B[1][3]*B[3][1]+B[0][1]*B[1][0]*B[3][3]+B[0][3]*B[1][1]*B[3][0]));
	C[2][3]=(-1)*(B[0][0]*B[1][1]*B[3][2]+B[0][1]*B[1][2]*B[3][0]+B[0][2]*B[1][0]*B[3][1])-(B[0][0]*B[1][2]*B[3][1]+B[0][1]*B[1][0]*B[3][2]+B[0][2]*B[1][1]*B[3][0]);
	
	C[3][0]=(-1)*(B[0][1]*B[1][2]*B[2][3]+B[0][2]*B[1][3]*B[2][1]+B[0][3]*B[1][1]*B[2][2])-(B[0][1]*B[1][3]*B[2][2]+B[0][2]*B[1][1]*B[2][3]+B[0][3]*B[1][2]*B[2][1]);
	C[3][1]=((B[0][0]*B[1][2]*B[2][3]+B[0][2]*B[1][3]*B[2][0]+B[0][3]*B[1][0]*B[2][2])-(B[0][0]*B[1][3]*B[2][2]+B[0][2]*B[1][0]*B[2][3]+B[0][3]*B[1][2]*B[2][0]));
	C[3][2]=(-1)*((B[0][0]*B[1][1]*B[2][3]+B[0][1]*B[1][3]*B[2][0]+B[0][3]*B[1][0]*B[2][1])-(B[0][0]*B[1][3]*B[2][1]+B[0][1]*B[1][0]*B[2][3]+B[0][3]*B[1][1]*B[2][0]));
	C[3][3]=(B[0][0]*B[1][1]*B[2][2]+B[0][1]*B[1][2]*B[2][0]+B[0][2]*B[1][0]*B[2][1])-(B[0][0]*B[1][2]*B[2][1]+B[0][1]*B[1][0]*B[2][2]+B[0][2]*B[1][1]*B[2][0]);
	
	for(i=0;i<4;i++)
	      for(j=0;j<4;j++)
		  I.m[i][j]=C[i][j]*x;
	
	return I;
}

Matrix transMat(Matrix &A)
{
	int i, j;	
	Matrix B;
	
	for(i = 0; i<4; i++)
	  for(j = 0; j<4; j++)
	  	B.m[i][j] = 0;
	
	for(i=0;i<4;i++)
	      for(j=0;j<4;j++)
		      B.m[i][j]=A.m[j][i];
	return B;
}